/************************************************************************
Lab 9 Nios Software

Dong Kai Wang, Fall 2017
Christine Chen, Fall 2013

For use with ECE 385 Experiment 9
University of Illinois ECE Department
************************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#include "aes.h"

// Pointer to base address of AES module, make sure it matches Qsys
volatile unsigned int * AES_PTR = (unsigned int *) 0x00000040;

// Execution mode: 0 for testing, 1 for benchmarking
int run_mode = 0;

/** charToHex
 *  Convert a single character to the 4-bit value it represents.
 *  
 *  Input: a character c (e.g. 'A')
 *  Output: converted 4-bit value (e.g. 0xA)
 */
char charToHex(char c)
{
	char hex = c;

	if (hex >= '0' && hex <= '9')
		hex -= '0';
	else if (hex >= 'A' && hex <= 'F')
	{
		hex -= 'A';
		hex += 10;
	}
	else if (hex >= 'a' && hex <= 'f')
	{
		hex -= 'a';
		hex += 10;
	}
	return hex;
}

/** charsToHex
 *  Convert two characters to byte value it represents.
 *  Inputs must be 0-9, A-F, or a-f.
 *  
 *  Input: two characters c1 and c2 (e.g. 'A' and '7')
 *  Output: converted byte value (e.g. 0xA7)
 */
char charsToHex(char c1, char c2)
{
	char hex1 = charToHex(c1);
	char hex2 = charToHex(c2);
	return (hex1 << 4) + hex2;
}

void SubBytes(unsigned char * msg_hex, int start, int end){
	int i;
	for(i = start; i < end; i++){
		msg_hex[i] = aes_sbox[msg_hex[i]];
	}
}

void RotWord(unsigned char * msg_hex, int prev_col, int new_col){
	msg_hex[new_col] 	 = msg_hex[prev_col + 1];
	msg_hex[new_col + 1] = msg_hex[prev_col + 2];
	msg_hex[new_col + 2] = msg_hex[prev_col + 3];
	msg_hex[new_col + 3] = msg_hex[prev_col];
}


void KeyExpansion(unsigned char * cipher_key, unsigned char * key_schedule){
	int i, j;
	for(i = 0; i < 16; i++) {
		key_schedule[i] = cipher_key[i]; //first 16 of new key_schedule is the original cipher key
	}
	for(i = 16; i < 176; i = i + 16) {
		for(j = i; j < i + 16; j = j + 4) {
			if(j % 16 == 0) {
				RotWord(key_schedule, j - 4, j);
				SubBytes(key_schedule, j, j + 4);
				key_schedule[j] 	= key_schedule[j - 16] ^ key_schedule[j] ^ (Rcon[i / 16] >> 24);
				key_schedule[j + 1] = key_schedule[j - 15] ^ key_schedule[j + 1];
				key_schedule[j + 2] = key_schedule[j - 14] ^ key_schedule[j + 2];
				key_schedule[j + 3] = key_schedule[j - 13] ^ key_schedule[j + 3];
			}
			else {
				key_schedule[j] 	= key_schedule[j - 16] ^ key_schedule[j - 4];
				key_schedule[j + 1] = key_schedule[j - 15] ^ key_schedule[j - 3];
				key_schedule[j + 2] = key_schedule[j - 14] ^ key_schedule[j - 2];
				key_schedule[j + 3] = key_schedule[j - 13] ^ key_schedule[j - 1];
			}
		}
}

void ShiftRows(unsigned char * msg_hex){
	unsigned char temp = msg_hex[1];
	msg_hex[1] = msg_hex[5];
	msg_hex[5] = msg_hex[9];
	msg_hex[9] = msg_hex[13];
	msg_hex[13] = temp;

	temp = msg_hex[2];
	msg_hex[2] = msg_hex[10];
	msg_hex[10] = temp;
	temp = msg_hex[6];
	msg_hex[6] = msg_hex[14];
	msg_hex[14] = temp;

	temp = msg_hex[3];
	msg_hex[3] = msg_hex[15];
	msg_hex[15] = msg_hex[11];
	msg_hex[11] = msg_hex[7];
	msg_hex[7] = temp;
}
void MixColumns(unsigned char * msg_hex) {
	unsigned char prev_state[16]; //used to store the previous state
	int i;
	for(i = 0; i < 16; i++) {
		prev_state[i] = msg_hex[i];
	}
	for(i = 0; i < 16; i = i + 4) {
		msg_hex[i]     = gf_mul[prev_state[i]][0] ^ gf_mul[prev_state[i + 1]][1] ^ prev_state[i + 2]            ^ prev_state[i + 3];
		msg_hex[i + 1] = prev_state[i]            ^ gf_mul[prev_state[i + 1]][0] ^ gf_mul[prev_state[i + 2]][1] ^ prev_state[i + 3];
		msg_hex[i + 2] = prev_state[i]            ^ prev_state[i + 1]            ^ gf_mul[prev_state[i + 2]][0] ^ gf_mul[prev_state[i + 3]][1];
		msg_hex[i + 3] = gf_mul[prev_state[i]][1] ^ prev_state[i + 1]            ^ prev_state[i + 2]            ^ gf_mul[prev_state[i + 3]][0];
	}
}

void AddRoundKey(unsigned char * msg_hex, unsigned char * round_key, int start, int end){
	int i, j = 0;
	for(i = start; i < end; i++, j++) {
		msg_hex[j] = msg_hex[j] ^ round_key[i];
	}
}
/** encrypt
 *  Perform AES encryption in software.
 *  Input:   msg_ascii - Pointer to 32x 8-bit char array that contains the input message in ASCII format
 *           key_ascii - Pointer to 32x 8-bit char array that contains the input key in ASCII format
 *  Output:  msg_enc - Pointer to 4x 32-bit int array that contains the encrypted message
 *           key - Pointer to 4x 32-bit int array that contains the input key
 */
void encrypt(unsigned char * msg_ascii, unsigned char * key_ascii, unsigned int * msg_enc, unsigned int * key)
{
	// Implement this function
	int msg_size = 16;
	unsigned char msg[16];
	unsigned char key_[16];
	unsigned char key_schedule[11*16]; //11 rounds (1 initial, 9 cycles, 1 final) -> 11*16 = 176

	int i;
	for(i = 0; i < 16; i++){
		msg[i] = charsToHex(msg_ascii[i*2], msg_ascii[i*2 + 1]);
		key_[i] = charsToHex(key_ascii[i*2], key_ascii[i*2 + 1]);
	}
	KeyExpansion(key_, key_schedule);
	AddRoundKey(msg, key_schedule, 0, 16);
	for(i = 1; i < 10; i++){
		SubBytes(msg, 0, 16);
		ShiftRows(msg);
		MixColumns(msg);
		AddRoundKey(msg, key_schedule, (i*16), ((i + 1)*16));
	}
	SubBytes(msg, 0, 16);
	ShiftRows(msg);
	AddRoundKey(msg, key_schedule, 10*16, 11*16);
	for(i = 0; i < 4; i++) {
		msg_enc[i] = (msg[i*4] << 24) + (msg[i*4 + 1] << 16) + (msg[i*4 + 2] << 8) + (msg[i*4 + 3]);
		key[i] = (key_[i*4] << 24) + (key_[i*4 + 1] << 16) + (key_[i*4 + 2] << 8) + (key_[i*4 + 3]);
	}
}
/** decrypt
 *  Perform AES decryption in hardware.
 *
 *  Input:  msg_enc - Pointer to 4x 32-bit int array that contains the encrypted message
 *              key - Pointer to 4x 32-bit int array that contains the input key
 *  Output: msg_dec - Pointer to 4x 32-bit int array that contains the decrypted message
 */
void decrypt(unsigned int * msg_enc, unsigned int * msg_dec, unsigned int * key) {
	int i;
	for(i = 0; i < 4; i++) {
		AES_PTR[i] = key[i];
		AES_PTR[i+4] = msg_enc[i];
	}
	//start the decryption process
	AES_PTR[15] = 0x00000000; //initially, AES_DONE is 0 
	AES_PTR[14] = 0x00000001; //start the decryption process
	while(AES_PTR[15] == 0x00000000) {} //let hardware run through the decrypt states
	msg_dec[0] = AES_PTR[8];
	msg_dec[1] = AES_PTR[9];
	msg_dec[2] = AES_PTR[10];
	msg_dec[3] = AES_PTR[11];
//	printf("msg_dec[0]: %08x \nmsg_dec[1]: %08x \nmsg_dec[2]: %08x \nmsg_dec[3]: %08x \n",msg_dec[0], msg_dec[1], msg_dec[2], msg_dec[3]);
	AES_PTR[14] = 0x00000000; //reset the decryption start signal
}

/** main
 *  Allows the user to enter the message, key, and select execution mode
 *
 */
int main()
{
	// Input Message and Key as 32x 8-bit ASCII Characters ([33] is for NULL terminator)
	unsigned char msg_ascii[33];
	unsigned char key_ascii[33];
	// Key, Encrypted Message, and Decrypted Message in 4x 32-bit Format to facilitate Read/Write to Hardware
	unsigned int key[4];
	unsigned int msg_enc[4];
	unsigned int msg_dec[4];

	printf("Select execution mode: 0 for testing, 1 for benchmarking: ");
	scanf("%d", &run_mode);

	if (run_mode == 0) {
		// Continuously Perform Encryption and Decryption
		while (1) {
			int i = 0;
			printf("\nEnter Message:\n");
			scanf("%s", msg_ascii);
			printf("\n");
			printf("\nEnter Key:\n");
			scanf("%s", key_ascii);
			printf("\n");
			encrypt(msg_ascii, key_ascii, msg_enc, key);
			printf("\nEncrpted message is: \n");
			for(i = 0; i < 4; i++){
				printf("%08x", msg_enc[i]);
			}
			printf("\n");
			decrypt(msg_enc, msg_dec, key);
			printf("\nDecrypted message is: \n");
			for(i = 0; i < 4; i++){
				printf("%08x", msg_dec[i]);
			}
			printf("\n");
		}
	}
	else {
		// Run the Benchmark
		int i = 0;
		int size_KB = 2;
		// Choose a random Plaintext and Key
		for (i = 0; i < 32; i++) {
			msg_ascii[i] = 'a';
			key_ascii[i] = 'b';
		}
		// Run Encryption
		clock_t begin = clock();
		for (i = 0; i < size_KB * 64; i++)
			encrypt(msg_ascii, key_ascii, msg_enc, key);
		clock_t end = clock();
		double time_spent = (double)(end - begin) / CLOCKS_PER_SEC;
		double speed = size_KB / time_spent;
		printf("Software Encryption Speed: %f KB/s \n", speed);
		// Run Decryption
		begin = clock();
		for (i = 0; i < size_KB * 64; i++)
			decrypt(msg_enc, msg_dec, key);
		end = clock();
		time_spent = (double)(end - begin) / CLOCKS_PER_SEC;
		speed = size_KB / time_spent;
		printf("Hardware Encryption Speed: %f KB/s \n", speed);
	}
	return 0;
}
